//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SampleSite.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetComposite", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class GetComposite : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Data.DataTable DataTabField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Data.DataTable DataTab {
            get {
                return this.DataTabField;
            }
            set {
                if ((object.ReferenceEquals(this.DataTabField, value) != true)) {
                    this.DataTabField = value;
                    this.RaisePropertyChanged("DataTab");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InsertComposite", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class InsertComposite : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
        SampleSite.ServiceReference1.GetComposite GetDataUsingDataContract();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<SampleSite.ServiceReference1.GetComposite> GetDataUsingDataContractAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddDataUsingDataContract", ReplyAction="http://tempuri.org/IService/AddDataUsingDataContractResponse")]
        string AddDataUsingDataContract(SampleSite.ServiceReference1.InsertComposite data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddDataUsingDataContract", ReplyAction="http://tempuri.org/IService/AddDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<string> AddDataUsingDataContractAsync(SampleSite.ServiceReference1.InsertComposite data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFirstDataContract", ReplyAction="http://tempuri.org/IService/GetFirstDataContractResponse")]
        string GetFirstDataContract();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFirstDataContract", ReplyAction="http://tempuri.org/IService/GetFirstDataContractResponse")]
        System.Threading.Tasks.Task<string> GetFirstDataContractAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : SampleSite.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<SampleSite.ServiceReference1.IService>, SampleSite.ServiceReference1.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SampleSite.ServiceReference1.GetComposite GetDataUsingDataContract() {
            return base.Channel.GetDataUsingDataContract();
        }
        
        public System.Threading.Tasks.Task<SampleSite.ServiceReference1.GetComposite> GetDataUsingDataContractAsync() {
            return base.Channel.GetDataUsingDataContractAsync();
        }
        
        public string AddDataUsingDataContract(SampleSite.ServiceReference1.InsertComposite data) {
            return base.Channel.AddDataUsingDataContract(data);
        }
        
        public System.Threading.Tasks.Task<string> AddDataUsingDataContractAsync(SampleSite.ServiceReference1.InsertComposite data) {
            return base.Channel.AddDataUsingDataContractAsync(data);
        }
        
        public string GetFirstDataContract() {
            return base.Channel.GetFirstDataContract();
        }
        
        public System.Threading.Tasks.Task<string> GetFirstDataContractAsync() {
            return base.Channel.GetFirstDataContractAsync();
        }
    }
}
